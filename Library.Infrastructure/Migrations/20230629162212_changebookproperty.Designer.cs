// <auto-generated />
using System;
using Library.Infrastructure.DataBaseHelper;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Library.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230629162212_changebookproperty")]
    partial class changebookproperty
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Library.Models.Models.Authors.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("Library.Models.Models.BookAuthors.BookAuthor", b =>
                {
                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("BookId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("BookAuthors");
                });

            modelBuilder.Entity("Library.Models.Models.Books.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("InLibrary")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PublicationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("Library.Models.Models.Employee.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdministrator")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1bf7271-6d45-4475-ad1f-5de6cc172dea"),
                            Email = "SuperAdmin@gmail.com",
                            IsAdministrator = true,
                            IsDeleted = false,
                            PasswordHash = new byte[] { 46, 231, 224, 97, 151, 98, 26, 238, 125, 39, 111, 171, 54, 172, 109, 20, 15, 37, 65, 67, 61, 102, 67, 225, 213, 87, 215, 107, 90, 204, 114, 125, 253, 90, 8, 207, 83, 55, 211, 176, 123, 165, 86, 243, 137, 172, 247, 196, 10, 244, 139, 33, 55, 117, 197, 238, 155, 190, 12, 41, 191, 95, 154, 127 },
                            PasswordSalt = new byte[] { 244, 241, 52, 3, 18, 183, 183, 128, 242, 231, 239, 159, 26, 130, 162, 145, 203, 29, 118, 20, 46, 113, 128, 201, 206, 135, 153, 83, 19, 47, 62, 170, 214, 41, 71, 207, 126, 219, 240, 104, 176, 208, 79, 134, 179, 189, 165, 53, 248, 60, 158, 208, 224, 60, 86, 48, 112, 97, 132, 152, 66, 178, 76, 81, 130, 201, 18, 214, 51, 138, 165, 131, 125, 137, 200, 125, 52, 240, 157, 57, 175, 70, 208, 36, 144, 19, 165, 115, 136, 242, 126, 36, 101, 201, 66, 231, 243, 243, 0, 5, 53, 177, 112, 113, 255, 3, 251, 10, 226, 57, 129, 9, 69, 105, 186, 137, 25, 192, 104, 129, 243, 13, 72, 142, 101, 235, 53, 114 }
                        });
                });

            modelBuilder.Entity("Library.Models.Models.BookAuthors.BookAuthor", b =>
                {
                    b.HasOne("Library.Models.Models.Authors.Author", "Author")
                        .WithMany("BookAuthors")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Models.Models.Books.Book", "Book")
                        .WithMany("BookAuthors")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Library.Models.Models.Authors.Author", b =>
                {
                    b.Navigation("BookAuthors");
                });

            modelBuilder.Entity("Library.Models.Models.Books.Book", b =>
                {
                    b.Navigation("BookAuthors");
                });
#pragma warning restore 612, 618
        }
    }
}
